// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NettLL.Design.DatabaseOperations.DataAccess;

#nullable disable

namespace NettLL.Design.Migrations
{
    [DbContext(typeof(ContextDB))]
    [Migration("20230208071537_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("NettLL.Design.DatabaseOperations.Entities.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("NettLL.Design.DatabaseOperations.Entities.Moive", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("copyright")
                        .HasColumnType("INTEGER");

                    b.Property<int>("epidose")
                        .HasColumnType("INTEGER");

                    b.Property<string>("moive")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("season")
                        .HasColumnType("INTEGER");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Moive");
                });

            modelBuilder.Entity("NettLL.Design.DatabaseOperations.Entities.MoiveWord", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("endTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("line")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("moiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("startTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("wordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("moiveId");

                    b.HasIndex("wordId");

                    b.ToTable("MoiveWord");
                });

            modelBuilder.Entity("NettLL.Design.DatabaseOperations.Entities.Sound", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("sound")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Sound");
                });

            modelBuilder.Entity("NettLL.Design.DatabaseOperations.Entities.Word", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("word")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Word");
                });

            modelBuilder.Entity("NettLL.Design.DatabaseOperations.Entities.WordCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("categoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("wordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("categoryId");

                    b.HasIndex("wordId");

                    b.ToTable("WordCategory");
                });

            modelBuilder.Entity("NettLL.Design.DatabaseOperations.Entities.WordSound", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("soundId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("wordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("soundId");

                    b.HasIndex("wordId");

                    b.ToTable("WordSound");
                });

            modelBuilder.Entity("NettLL.Design.DatabaseOperations.Entities.MoiveWord", b =>
                {
                    b.HasOne("NettLL.Design.DatabaseOperations.Entities.Moive", "moive")
                        .WithMany("moivewords")
                        .HasForeignKey("moiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NettLL.Design.DatabaseOperations.Entities.Word", "word")
                        .WithMany("moivewords")
                        .HasForeignKey("wordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("moive");

                    b.Navigation("word");
                });

            modelBuilder.Entity("NettLL.Design.DatabaseOperations.Entities.WordCategory", b =>
                {
                    b.HasOne("NettLL.Design.DatabaseOperations.Entities.Category", "category")
                        .WithMany("wordcategories")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NettLL.Design.DatabaseOperations.Entities.Word", "word")
                        .WithMany("wordcategories")
                        .HasForeignKey("wordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("word");
                });

            modelBuilder.Entity("NettLL.Design.DatabaseOperations.Entities.WordSound", b =>
                {
                    b.HasOne("NettLL.Design.DatabaseOperations.Entities.Sound", "sound")
                        .WithMany("wordsounds")
                        .HasForeignKey("soundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NettLL.Design.DatabaseOperations.Entities.Word", "word")
                        .WithMany("wordsounds")
                        .HasForeignKey("wordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sound");

                    b.Navigation("word");
                });

            modelBuilder.Entity("NettLL.Design.DatabaseOperations.Entities.Category", b =>
                {
                    b.Navigation("wordcategories");
                });

            modelBuilder.Entity("NettLL.Design.DatabaseOperations.Entities.Moive", b =>
                {
                    b.Navigation("moivewords");
                });

            modelBuilder.Entity("NettLL.Design.DatabaseOperations.Entities.Sound", b =>
                {
                    b.Navigation("wordsounds");
                });

            modelBuilder.Entity("NettLL.Design.DatabaseOperations.Entities.Word", b =>
                {
                    b.Navigation("moivewords");

                    b.Navigation("wordcategories");

                    b.Navigation("wordsounds");
                });
#pragma warning restore 612, 618
        }
    }
}
